name: Build and Deploy Docker Images

on:
  push:
    branches:
      - main 
  workflow_dispatch:   # This allows the workflow to be manually triggered

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Azure Container Registry
      run: echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login csdtms.azurecr.io --username csdtms --password-stdin

    - name: Build and Push Docker Images
      run: |
        # Build and push the other microservices (user_ms, match_ms, etc.)
        docker build -t csdtms.azurecr.io/user_ms:latest ./backend/user_ms \
          --build-arg SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          --build-arg SUPABASE_API_KEY="${{ secrets.SUPABASE_API_KEY }}" \
          --build-arg SUPABASE_BUCKET="${{ secrets.SUPABASE_BUCKET }}" \
          --build-arg CLERK_SIGNING_SECRET="${{ secrets.CLERK_SIGNING_SECRET }}"
        docker push csdtms.azurecr.io/user_ms:latest
        
        # Build and push tournament_ms
        docker build -t csdtms.azurecr.io/tournament_ms:latest ./backend/tournament_ms \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PW="${{ secrets.DB_PW }}"
        docker push csdtms.azurecr.io/tournament_ms:latest

        # Build and push match_ms
        docker build -t csdtms.azurecr.io/match_ms:latest ./backend/match_ms \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PW="${{ secrets.DB_PW }}"
        docker push csdtms.azurecr.io/match_ms:latest

        # Build and push rating_ms
        docker build -t csdtms.azurecr.io/rating_ms:latest ./backend/rating_ms \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PW="${{ secrets.DB_PW }}"
        docker push csdtms.azurecr.io/rating_ms:latest

    - name: Log in to Azure
      run: az login --username kelyn.wong.2022@scis.smu.edu.sg --password "${{ secrets.AZURE_PASSWORD }}"

    - name: Deploy other Microservices
      run: |
        # Deploy user_ms
        az container create --resource-group tms --name user-ms --image csdtms.azurecr.io/user_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8083 --environment-variables SUPABASE_URL="${{ secrets.SUPABASE_URL }}" SUPABASE_API_KEY="${{ secrets.SUPABASE_API_KEY }}" SUPABASE_BUCKET="${{ secrets.SUPABASE_BUCKET }}" CLERK_SIGNING_SECRET="${{ secrets.CLERK_SIGNING_SECRET }}" \
        --vnet tmsVNet \
        --subnet aciSubnet

        # Deploy tournament_ms
        az container create --resource-group tms --name tournament-ms --image csdtms.azurecr.io/tournament_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8082 --environment-variables DB_URL="${{ secrets.DB_URL }}" DB_USER="${{ secrets.DB_USER }}" DB_PW="${{ secrets.DB_PW }}" \
        --vnet tmsVNet \
        --subnet aciSubnet 

        # Deploy match_ms
        az container create --resource-group tms --name match-ms --image csdtms.azurecr.io/match_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8080 --environment-variables DB_URL="${{ secrets.DB_URL }}" DB_USER="${{ secrets.DB_USER }}" DB_PW="${{ secrets.DB_PW }}" \
        --vnet tmsVNet \
        --subnet aciSubnet 

        # Deploy rating_ms
        az container create --resource-group tms --name rating-ms --image csdtms.azurecr.io/rating_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8084 --environment-variables DB_URL="${{ secrets.DB_URL }}" DB_USER="${{ secrets.DB_USER }}" DB_PW="${{ secrets.DB_PW }}" \
        --vnet tmsVNet \
        --subnet aciSubnet 

    - name: Build and Deploy Matchmaking MS
      run: |
        MATCH_MS_IP=$(az container show --resource-group tms --name match-ms --query "ipAddress.ip" -o tsv)
        TOURNAMENT_MS_IP=$(az container show --resource-group tms --name tournament-ms --query "ipAddress.ip" -o tsv)
        USER_MS_IP=$(az container show --resource-group tms --name user-ms --query "ipAddress.ip" -o tsv)
        RATING_MS_IP=$(az container show --resource-group tms --name rating-ms --query "ipAddress.ip" -o tsv)

        # Build and push matchmaking
        docker build -t csdtms.azurecr.io/matchmaking:latest ./backend/matchmaking \
          --build-arg MATCH_URL="http://$MATCH_MS_IP:8080" \
          --build-arg TOURNAMENT_URL="http://$TOURNAMENT_MS_IP:8082" \
          --build-arg PLAYER_URL="http://$USER_MS_IP:8083" \
          --build-arg RATING_URL="http://$RATING_MS_IP:8084"
        docker push csdtms.azurecr.io/matchmaking:latest

        # Deploy matchmaking MS
        az container create --resource-group tms --name matchmaking --image csdtms.azurecr.io/matchmaking:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8081 \
        --environment-variables MATCH_URL="http://$MATCH_MS_IP:8080" TOURNAMENT_URL="http://$TOURNAMENT_MS_IP:8082" PLAYER_URL="http://$USER_MS_IP:8083" RATING_URL="http://$RATING_MS_IP:8084" \
        --vnet tmsVNet \
        --subnet aciSubnet

    - name: Create Application Gateway
      run: |
        # Create Public IP for the Application Gateway
        az network public-ip create \
          --resource-group tms \
          --name appGatewayPublicIP \
          --sku Standard

        # Create Application Gateway
        az network application-gateway create \
          --resource-group tms \
          --name appGateway \
          --sku Standard_v2 \
          --frontend-port 80 \
          --public-ip-address appGatewayPublicIP \
          --vnet-name tmsVNet \
          --subnet tmsSubnet \
          --http-settings-cookie-based-affinity Disabled \
          --routing-rule-type Basic \
          --priority 1000

        # Wait for the Application Gateway to be fully provisioned
        az network application-gateway wait --created --name appGateway --resource-group tms

    - name: Configure Backend Pools
      run: |
        # Get IP addresses of the microservices
        USER_MS_IP=$(az container show --resource-group tms --name user-ms --query "ipAddress.ip" -o tsv)
        TOURNAMENT_MS_IP=$(az container show --resource-group tms --name tournament-ms --query "ipAddress.ip" -o tsv)
        MATCH_MS_IP=$(az container show --resource-group tms --name match-ms --query "ipAddress.ip" -o tsv)
        RATING_MS_IP=$(az container show --resource-group tms --name rating-ms --query "ipAddress.ip" -o tsv)
        MATCHMAKING_MS_IP=$(az container show --resource-group tms --name matchmaking --query "ipAddress.ip" -o tsv)

        # Add backend pools for each microservice
        az network application-gateway address-pool create \
          --resource-group tms \
          --gateway-name appGateway \
          --name userMSBackendPool \
          --servers $USER_MS_IP

        az network application-gateway address-pool create \
          --resource-group tms \
          --gateway-name appGateway \
          --name tournamentMSBackendPool \
          --servers $TOURNAMENT_MS_IP

        az network application-gateway address-pool create \
          --resource-group tms \
          --gateway-name appGateway \
          --name matchMSBackendPool \
          --servers $MATCH_MS_IP

        az network application-gateway address-pool create \
          --resource-group tms \
          --gateway-name appGateway \
          --name ratingMSBackendPool \
          --servers $RATING_MS_IP

        az network application-gateway address-pool create \
          --resource-group tms \
          --gateway-name appGateway \
          --name matchmakingMSBackendPool \
          --servers $MATCHMAKING_MS_IP

    - name: Configure Health Probes for Microservices
      run: |
        # Get IP addresses of the microservices
        USER_MS_IP=$(az container show --resource-group tms --name user-ms --query "ipAddress.ip" -o tsv)
        TOURNAMENT_MS_IP=$(az container show --resource-group tms --name tournament-ms --query "ipAddress.ip" -o tsv)
        MATCH_MS_IP=$(az container show --resource-group tms --name match-ms --query "ipAddress.ip" -o tsv)
        RATING_MS_IP=$(az container show --resource-group tms --name rating-ms --query "ipAddress.ip" -o tsv)
        MATCHMAKING_MS_IP=$(az container show --resource-group tms --name matchmaking --query "ipAddress.ip" -o tsv)

        # Create health probes using HTTP settings
        az network application-gateway probe create \
          --resource-group tms \
          --gateway-name appGateway \
          --name userMSHealthProbe \
          --protocol Http \
          --path /health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        az network application-gateway probe create \
          --resource-group tms \
          --gateway-name appGateway \
          --name tournamentMSHealthProbe \
          --protocol Http \
          --path /health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        az network application-gateway probe create \
          --resource-group tms \
          --gateway-name appGateway \
          --name matchMSHealthProbe \
          --protocol Http \
          --path /health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        az network application-gateway probe create \
          --resource-group tms \
          --gateway-name appGateway \
          --name ratingMSHealthProbe \
          --protocol Http \
          --path /health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        az network application-gateway probe create \
          --resource-group tms \
          --gateway-name appGateway \
          --name matchmakingMSHealthProbe \
          --protocol Http \
          --path /health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

    - name: Configure HTTP Settings for each Backend
      run: |
        # HTTP settings for user-ms
        az network application-gateway http-settings create \
          --resource-group tms \
          --gateway-name appGateway \
          --name userMSHttpSetting \
          --port 8083 \
          --protocol Http

        # HTTP settings for tournament-ms
        az network application-gateway http-settings create \
          --resource-group tms \
          --gateway-name appGateway \
          --name tournamentMSHttpSetting \
          --port 8082 \
          --protocol Http

        # HTTP settings for match-ms
        az network application-gateway http-settings create \
          --resource-group tms \
          --gateway-name appGateway \
          --name matchMSHttpSetting \
          --port 8080 \
          --protocol Http

        # HTTP settings for rating-ms
        az network application-gateway http-settings create \
          --resource-group tms \
          --gateway-name appGateway \
          --name ratingMSHttpSetting \
          --port 8084 \
          --protocol Http

        # HTTP settings for rating-ms
        az network application-gateway http-settings create \
          --resource-group tms \
          --gateway-name appGateway \
          --name matchmakingMSHttpSetting \
          --port 8081 \
          --protocol Http

    - name: Configure Path-Based Routing Rules
      run: |
        # Create a URL path map with a specific default backend pool for the user-ms
        az network application-gateway url-path-map create \
          --resource-group tms \
          --gateway-name appGateway \
          --name myPathMap \
          --paths /user-ms/* \
          --address-pool userMSBackendPool \
          --http-settings userMSHttpSetting \
          --default-address-pool userMSBackendPool \
          --default-http-settings userMSHttpSetting

        # Add path rules for other microservices
        az network application-gateway url-path-map rule create \
          --resource-group tms \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name tournamentMSRule \
          --paths /tournament-ms/* \
          --address-pool tournamentMSBackendPool \
          --http-settings tournamentMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tms \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name matchMSRule \
          --paths /match-ms/* \
          --address-pool matchMSBackendPool \
          --http-settings matchMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tms \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name ratingMSRule \
          --paths /rating-ms/* \
          --address-pool ratingMSBackendPool \
          --http-settings ratingMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tms \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name matchmakingMSRule \
          --paths /matchmaking-ms/* \
          --address-pool matchmakingMSBackendPool \
          --http-settings matchmakingMSHttpSetting

        # Update existing routing rule that uses the URL path map
        az network application-gateway rule update \
          --resource-group tms \
          --gateway-name appGateway \
          --name rule1 \
          --rule-type PathBasedRouting \
          --http-listener appGatewayHttpListener \
          --url-path-map myPathMap \
          --address-pool userMSBackendPool \
          --http-settings userMSHttpSetting \
          --priority 100
