name: Build and Deploy Docker Images

on:
  push:
    branches:
      - main 
  workflow_dispatch:   # This allows the workflow to be manually triggered

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Azure Container Registry
      run: echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login csdtms.azurecr.io --username csdtms --password-stdin

    - name: Build and Push Docker Images
      run: |
        # Build and push the other microservices (user_ms, match_ms, etc.)
        docker build -t csdtms.azurecr.io/user_ms:latest ./backend/user_ms \
          --build-arg SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          --build-arg SUPABASE_API_KEY="${{ secrets.SUPABASE_API_KEY }}" \
          --build-arg SUPABASE_BUCKET="${{ secrets.SUPABASE_BUCKET }}" \
          --build-arg CLERK_SIGNING_SECRET="${{ secrets.CLERK_SIGNING_SECRET }}" \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PW="${{ secrets.DB_PW }}"
        docker push csdtms.azurecr.io/user_ms:latest
        
        # Build and push tournament_ms
        docker build -t csdtms.azurecr.io/tournament_ms:latest ./backend/tournament_ms \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PW="${{ secrets.DB_PW }}"
        docker push csdtms.azurecr.io/tournament_ms:latest

        # Build and push match_ms
        docker build -t csdtms.azurecr.io/match_ms:latest ./backend/match_ms \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_USER="${{ secrets.DB_USER }}" \
          --build-arg DB_PW="${{ secrets.DB_PW }}"
        docker push csdtms.azurecr.io/match_ms:latest

    - name: Log in to Azure
      run: az login --username sonia.lim.2023@scis.smu.edu.sg --password "${{ secrets.AZURE_PASSWORD }}"

    - name: Create Resource Group
      run: |
        # Create Resource Group
        az group create --name tmsSG --location southeastasia
    
    - name: Create Virtual Network and Subnets (if not exists)
      run: |
        # Check if VNet exists
        vnet_exists=$(az network vnet show \
          --resource-group tmsSG \
          --name tmsVNet2 \
          --query "id" \
          --output tsv || echo "VNetNotFound")
        
        if [ "$vnet_exists" == "VNetNotFound" ]; then
          echo "Creating VNet and Subnets..."
          
          # Create VNet with two subnets
          az network vnet create \
            --resource-group tmsSG \
            --name tmsVNet2 \
            --address-prefix 10.0.0.0/16 \
            --subnet-name tmsSubnet2 \
            --subnet-prefix 10.0.3.0/24

          # Create the second subnet (aciSubnet2)
          az network vnet subnet create \
            --resource-group tmsSG \
            --vnet-name tmsVNet2 \
            --name aciSubnet2 \
            --address-prefix 10.0.1.0/24
        else
          echo "VNet already exists, skipping creation."
        fi

    - name: Deploy other Microservices
      run: |
        # Delete user-ms if it exists
        az container delete --resource-group tmsSG --name user-ms --yes 
      
        # Deploy user_ms
        az container create --resource-group tmsSG --name user-ms --image csdtms.azurecr.io/user_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8083 --environment-variables SUPABASE_URL="${{ secrets.SUPABASE_URL }}" SUPABASE_API_KEY="${{ secrets.SUPABASE_API_KEY }}" SUPABASE_BUCKET="${{ secrets.SUPABASE_BUCKET }}" CLERK_SIGNING_SECRET="${{ secrets.CLERK_SIGNING_SECRET }}" DB_URL="${{ secrets.DB_URL }}" DB_USER="${{ secrets.DB_USER }}" DB_PW="${{ secrets.DB_PW }}" \
        --vnet tmsVNet2 \
        --subnet aciSubnet2
      
        # Delete tournament-ms if it exists
        az container delete --resource-group tmsSG --name tournament-ms --yes 
      
        # Deploy tournament_ms
        az container create --resource-group tmsSG --name tournament-ms --image csdtms.azurecr.io/tournament_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8082 --environment-variables DB_URL="${{ secrets.DB_URL }}" DB_USER="${{ secrets.DB_USER }}" DB_PW="${{ secrets.DB_PW }}" \
        --vnet tmsVNet2 \
        --subnet aciSubnet2 
      
        # Delete match-ms if it exists
        az container delete --resource-group tmsSG --name match-ms --yes 
      
        # Deploy match_ms
        az container create --resource-group tmsSG --name match-ms --image csdtms.azurecr.io/match_ms:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8080 --environment-variables DB_URL="${{ secrets.DB_URL }}" DB_USER="${{ secrets.DB_USER }}" DB_PW="${{ secrets.DB_PW }}" \
        --vnet tmsVNet2 \
        --subnet aciSubnet2       

    - name: Build and Deploy Matchmaking MS
      run: |
        MATCH_MS_IP=$(az container show --resource-group tmsSG --name match-ms --query "ipAddress.ip" -o tsv)
        TOURNAMENT_MS_IP=$(az container show --resource-group tmsSG --name tournament-ms --query "ipAddress.ip" -o tsv)
        USER_MS_IP=$(az container show --resource-group tmsSG --name user-ms --query "ipAddress.ip" -o tsv)

        # Build and push matchmaking
        docker build -t csdtms.azurecr.io/matchmaking:latest ./backend/matchmaking \
          --build-arg MATCH_URL="http://$MATCH_MS_IP:8080/matches" \
          --build-arg TOURNAMENT_URL="http://$TOURNAMENT_MS_IP:8082/tournaments" \
          --build-arg PLAYER_URL="http://$USER_MS_IP:8083/users" \
          --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" 
        docker push csdtms.azurecr.io/matchmaking:latest

        # Delete matchmaking if it exists
        az container delete --resource-group tmsSG --name matchmaking --yes 

        # Deploy matchmaking MS
        az container create --resource-group tmsSG --name matchmaking --image csdtms.azurecr.io/matchmaking:latest --cpu 1 --memory 1.5 --registry-login-server csdtms.azurecr.io --registry-username csdtms --registry-password "${{ secrets.AZURE_ACR_PASSWORD }}" --restart-policy OnFailure --ports 8081 \
        --environment-variables MATCH_URL="http://$MATCH_MS_IP:8080/matches" TOURNAMENT_URL="http://$TOURNAMENT_MS_IP:8082/tournaments" PLAYER_URL="http://$USER_MS_IP:8083/users" AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
        --vnet tmsVNet2 \
        --subnet aciSubnet2

    - name: Create API Management (APIM)
      run: |
        # Create API Management instance
        az apim create \
          --name csdtmsSGAPI \
          --resource-group tmsSG \
          --location southeastasia \
          --sku-name Developer \
          --publisher-email sonia.lim.2023@scis.smu.edu.sg \
          --publisher-name sonia \
          --public-network-access true

    - name: Create NSG and allow only APIM to access Application Gateway
      run: |
        # Check if NSG is already attached to the subnet
        existing_nsg=$(az network vnet subnet show \
          --resource-group tmsSG \
          --vnet-name tmsVNet2 \
          --name tmsSubnet2 \
          --query "networkSecurityGroup.id" \
          --output tsv)
    
        # If NSG is attached, detach it
        if [ -n "$existing_nsg" ]; then
          echo "Detaching existing NSG from the subnet..."
          az network vnet subnet update \
            --resource-group tmsSG \
            --vnet-name tmsVNet2 \
            --name tmsSubnet2 \
            --remove networkSecurityGroup
        fi
    
        # Create Network Security Group (NSG) if it doesn't exist
        az network nsg create \
          --resource-group tmsSG \
          --name appGatewayNSG
    
        # Check if NSG rule exists
        rule_exists=$(az network nsg rule list \
          --resource-group tmsSG \
          --nsg-name appGatewayNSG \
          --query "[?name=='AllowAppGatewayPorts']" \
          --output tsv)
    
        if [ -z "$rule_exists" ]; then
          # If rule does not exist, create it
          az network nsg rule create \
            --resource-group tmsSG \
            --nsg-name appGatewayNSG \
            --name AllowAppGatewayPorts \
            --protocol Tcp \
            --priority 101 \
            --source-address-prefixes '*' \
            --destination-port-ranges 65200-65535 \
            --access Allow \
            --direction Inbound
        else
          echo "NSG rule AllowAppGatewayPorts already exists, skipping creation."
        fi
    
        # Resolve the public IP of the APIM instance
        apim_public_ip=$(nslookup csdtmssgapi.azure-api.net | grep 'Address' | tail -n 1 | awk '{print $2}')
    
        # Create NSG rule allowing access from APIM's public IP to Application Gateway
        az network nsg rule create \
          --resource-group tmsSG \
          --nsg-name appGatewayNSG \
          --name AllowAPIMAccess \
          --protocol Tcp \
          --priority 100 \
          --source-address-prefixes ${apim_public_ip} \
          --destination-port-ranges 80 \
          --access Allow \
          --direction Inbound

    - name: Attach NSG to Subnet
      run: |
        # Attach NSG to the subnet
        az network vnet subnet update \
          --resource-group tmsSG \
          --vnet-name tmsVNet2 \
          --name tmsSubnet2 \
          --network-security-group appGatewayNSG

    - name: Create Application Gateway
      run: |
        # Create Public IP for the Application Gateway
        az network public-ip create \
          --resource-group tmsSG \
          --name appGatewayPublicIP \
          --sku Standard

        # Create Application Gateway
        az network application-gateway create \
          --resource-group tmsSG \
          --name appGateway \
          --sku Standard_v2 \
          --frontend-port 80 \
          --public-ip-address appGatewayPublicIP \
          --vnet-name tmsVNet2 \
          --subnet tmsSubnet2 \
          --http-settings-cookie-based-affinity Disabled \
          --routing-rule-type Basic \
          --priority 1000

        # Wait for the Application Gateway to be fully provisioned
        az network application-gateway wait --created --name appGateway --resource-group tmsSG

    - name: Create API in APIM with JWT Validation
      run: |
        # Retrieve the public IP of the Application Gateway
        appgw_public_ip=$(az network public-ip show \
          --resource-group tmsSG \
          --name appGatewayPublicIP \
          --query "ipAddress" \
          --output tsv)

        # Create API in APIM with public IP of Application Gateway
        az apim api create \
          --resource-group tmsSG \
          --service-name csdtmssgapi \
          --api-id myApi \
          --path / \
          --display-name "TMS API" \
          --service-url "http://${appgw_public_ip}" \
          --protocols https

        # PUBLIC Routes
        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getMatchesByTournament --display-name "Get Matches by Tournament" --method GET --url-template "/matches/tournament/{tournament_id}" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getMatchGames --display-name "Get Match Games" --method GET --url-template "/matches/{match_id}/games" --template-parameters name=match_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUserWins --display-name "Get User Wins" --method GET --url-template "/matches/user/win/{user_id}" --template-parameters name=user_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUserLosses --display-name "Get User Losses" --method GET --url-template "/matches/user/loss/{user_id}" --template-parameters name=user_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUserMatchPlayed --display-name "Get User Match Played" --method GET --url-template "/matches/user/played/{user_id}" --template-parameters name=user_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUserById --display-name "Get User by ID" --method GET --url-template "/users/{id}" --template-parameters name=id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUserRole --display-name "Get User Role" --method GET --url-template "/users/role/{role}" --template-parameters name=role type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getTopPlayers --display-name "Get Top Players" --method GET --url-template "/users/top-players"

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUsers --display-name "Get Users" --method GET --url-template "/users"

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getTournaments --display-name "Get Tournaments" --method GET --url-template "/tournaments"

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getTournamentPlayers --display-name "Get Tournament Players by Player ID" --method GET --url-template "/tournaments/players/{player_id}" --template-parameters name=player_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getTournamentById --display-name "Get Tournament by ID" --method GET --url-template "/tournaments/id/{tournament_id}" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getTournamentPlayersByTournamentId --display-name "Get Tournament Players by Tournament ID" --method GET --url-template "/tournaments/{tournament_id}/players" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getStatus --display-name "Get status" --method GET --url-template "/tournaments/status/{status}" --template-parameters name=status type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getSimulation --display-name "Get simulation" --method GET --url-template "/matchmaking/matches/{tournament_id}/simulate" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getManySimulation --display-name "Get many simulation" --method GET --url-template "/matchmaking/matches/{tournament_id}/simulate-many" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id clerkWebhook --display-name "Clerk Webhook" --method POST --url-template "/users/clerk-webhook" 

        # USER Routes
        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id getUserPlayer --display-name "Get User Player" --method GET --url-template "/tournaments/{tournament_id}/players/{user_id}" --template-parameters name=user_id type=string required=true --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id registerPlayer --display-name "Register Player" --method POST --url-template "/tournaments/{tournament_id}/players/{user_id}/register" --template-parameters name=user_id type=string required=true --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id deregisterPlayer --display-name "Deregister Player" --method PUT --url-template "/tournaments/{tournament_id}/players/{user_id}/deregister" --template-parameters name=user_id type=string required=true --template-parameters name=tournament_id type=string required=true

        # ADMIN Routes
        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id updateGame --display-name "Update Game" --method PUT --url-template "/matches/{match_id}/games/{game_id}" --template-parameters name=match_id type=string required=true --template-parameters name=game_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id createMatchmaking --display-name "Create Matchmaking for Tournament" --method POST --url-template "/matchmaking/{tournament_id}/strategy/{strategy}" --template-parameters name=tournament_id type=string required=true --template-parameters name=strategy type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id postMatchResult --display-name "Post Match Result" --method POST --url-template "/matchmaking/result/{match_id}" --template-parameters name=match_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id createTournamentMain --display-name "Create Tournament Main" --method POST --url-template "/tournaments"

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id updateTournament --display-name "Update Tournament" --method PUT --url-template "/tournaments/{tournament_id}" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id updateTournamentStatus --display-name "Update Tournament Status" --method PUT --url-template "/tournaments/{tournament_id}/status" --template-parameters name=tournament_id type=string required=true

        az apim api operation create --resource-group tmsSG --service-name csdtmssgapi --api-id myApi --operation-id deleteTournament --display-name "Delete Tournament" --method DELETE --url-template "/tournaments/{tournament_id}" --template-parameters name=tournament_id type=string required=true


        # # Create GET operation
        # az apim api operation create \
        #   --resource-group tmsSG \
        #   --service-name csdtmssgapi \
        #   --api-id myApi \
        #   --operation-id getOperation \
        #   --display-name "GET Operation" \
        #   --method GET \
        #   --url-template "/{*path}" \
        #   --template-parameters name=path type=string required=true
        
        # # Create POST operation
        # az apim api operation create \
        #   --resource-group tmsSG \
        #   --service-name csdtmssgapi \
        #   --api-id myApi \
        #   --operation-id postOperation \
        #   --display-name "POST Operation" \
        #   --method POST \
        #   --url-template "/{*path}" \
        #   --template-parameters name=path type=string required=true

        # # Create PUT operation
        # az apim api operation create \
        #   --resource-group tmsSG \
        #   --service-name csdtmssgapi \
        #   --api-id myApi \
        #   --operation-id putOperation \
        #   --display-name "PUT Operation" \
        #   --method PUT \
        #   --url-template "/{*path}" \
        #   --template-parameters name=path type=string required=true
        
        # # Create DELETE operation
        # az apim api operation create \
        #   --resource-group tmsSG \
        #   --service-name csdtmssgapi \
        #   --api-id myApi \
        #   --operation-id deleteOperation \
        #   --display-name "DELETE Operation" \
        #   --method DELETE \
        #   --url-template "/{*path}" \
        #   --template-parameters name=path type=string required=true
        
        # # Set up JWT validation in APIM for the API
        # az apim api operation policy update \
        #   --resource-group tmsSG \
        #   --service-name csdtmssgapi \
        #   --api-id myApi \
        #   --operation-id all \
        #   --policy "<inbound><validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized\"><issuer-signing-keys><key><value>${{ secrets.CLERK_SIGNING_SECRET }}</value></key></issuer-signing-keys></validate-jwt></inbound>"


    - name: Configure Backend Pools
      run: |
        # Get IP addresses of the microservices
        USER_MS_IP=$(az container show --resource-group tmsSG --name user-ms --query "ipAddress.ip" -o tsv)
        TOURNAMENT_MS_IP=$(az container show --resource-group tmsSG --name tournament-ms --query "ipAddress.ip" -o tsv)
        MATCH_MS_IP=$(az container show --resource-group tmsSG --name match-ms --query "ipAddress.ip" -o tsv)
        MATCHMAKING_MS_IP=$(az container show --resource-group tmsSG --name matchmaking --query "ipAddress.ip" -o tsv)

        # Add backend pools for each microservice
        az network application-gateway address-pool create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name userMSBackendPool \
          --servers $USER_MS_IP

        az network application-gateway address-pool create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name tournamentMSBackendPool \
          --servers $TOURNAMENT_MS_IP

        az network application-gateway address-pool create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name matchMSBackendPool \
          --servers $MATCH_MS_IP

        az network application-gateway address-pool create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name matchmakingMSBackendPool \
          --servers $MATCHMAKING_MS_IP

    - name: Configure Health Probes for Microservices
      run: |
        # Get IP addresses of the microservices
        USER_MS_IP=$(az container show --resource-group tmsSG --name user-ms --query "ipAddress.ip" -o tsv)
        TOURNAMENT_MS_IP=$(az container show --resource-group tmsSG --name tournament-ms --query "ipAddress.ip" -o tsv)
        MATCH_MS_IP=$(az container show --resource-group tmsSG --name match-ms --query "ipAddress.ip" -o tsv)
        MATCHMAKING_MS_IP=$(az container show --resource-group tmsSG --name matchmaking --query "ipAddress.ip" -o tsv)

        # Create health probes using HTTP settings
        az network application-gateway probe create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name userMSHealthProbe \
          --protocol Http \
          --path /users/health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        # Repeat for other services
        az network application-gateway probe create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name tournamentMSHealthProbe \
          --protocol Http \
          --path /tournaments/health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        az network application-gateway probe create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name matchMSHealthProbe \
          --protocol Http \
          --path /matches/health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

        az network application-gateway probe create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name matchmakingMSHealthProbe \
          --protocol Http \
          --path /matchmaking/health \
          --timeout 20 \
          --interval 30 \
          --from-http-settings true

    - name: Configure HTTP Settings for each Backend
      run: |
        # HTTP settings for user-ms
        az network application-gateway http-settings create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name userMSHttpSetting \
          --port 8083 \
          --protocol Http \
          --host-name-from-backend-pool true \
          --probe userMSHealthProbe

        # HTTP settings for tournament-ms
        az network application-gateway http-settings create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name tournamentMSHttpSetting \
          --port 8082 \
          --protocol Http \
          --host-name-from-backend-pool true \
          --probe tournamentMSHealthProbe

        # HTTP settings for match-ms
        az network application-gateway http-settings create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name matchMSHttpSetting \
          --port 8080 \
          --protocol Http \
          --host-name-from-backend-pool true \
          --probe matchMSHealthProbe

        # HTTP settings for matchmaking-ms
        az network application-gateway http-settings create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name matchmakingMSHttpSetting \
          --port 8081 \
          --protocol Http \
          --host-name-from-backend-pool true \
          --probe matchmakingMSHealthProbe

    - name: Configure Path-Based Routing Rules
      run: |
        # Create a URL path map with a specific default backend pool for the user-ms
        az network application-gateway url-path-map create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name myPathMap \
          --paths /users/* \
          --address-pool userMSBackendPool \
          --http-settings userMSHttpSetting \
          --default-address-pool userMSBackendPool \
          --default-http-settings userMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name user \
          --paths /users \
          --address-pool userMSBackendPool \
          --http-settings userMSHttpSetting

        # Add path rules for other microservices
        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name tournamentMSRule \
          --paths /tournaments/* \
          --address-pool tournamentMSBackendPool \
          --http-settings tournamentMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name tournament \
          --paths /tournaments \
          --address-pool tournamentMSBackendPool \
          --http-settings tournamentMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name matchMSRule \
          --paths /matches/* \
          --address-pool matchMSBackendPool \
          --http-settings matchMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name match \
          --paths /matches \
          --address-pool matchMSBackendPool \
          --http-settings matchMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name matchmakingMSRule \
          --paths /matchmaking/* \
          --address-pool matchmakingMSBackendPool \
          --http-settings matchmakingMSHttpSetting

        az network application-gateway url-path-map rule create \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --path-map-name myPathMap \
          --name matchmaking \
          --paths /matchmaking \
          --address-pool matchmakingMSBackendPool \
          --http-settings matchmakingMSHttpSetting

        # Update existing routing rule that uses the URL path map
        az network application-gateway rule update \
          --resource-group tmsSG \
          --gateway-name appGateway \
          --name rule1 \
          --rule-type PathBasedRouting \
          --http-listener appGatewayHttpListener \
          --url-path-map myPathMap \
          --address-pool userMSBackendPool \
          --http-settings userMSHttpSetting \
          --priority 100

  build-and-analyze-with-sonarcloud:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build and analyze match_ms
      - name: Build and analyze match_ms
        working-directory: backend/match_ms
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_MATCHMS }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PW: ${{ secrets.DB_PW }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=kelynwong_TMS-MATCHMS

      # Build and analyze tournament_ms
      - name: Build and analyze tournament_ms
        working-directory: backend/tournament_ms
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_TOURNAMENTMS }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PW: ${{ secrets.DB_PW }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=kelynwong_TMS-TOURNAMENTMS

      # Build and analyze user_ms
      - name: Build and analyze user_ms
        working-directory: backend/user_ms
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_USERMS }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PW: ${{ secrets.DB_PW }}
          CLERK_SIGNING_SECRET: ${{ secrets.CLERK_SIGNING_SECRET }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=kelynwong_TMS-USERMS

      # Build and analyze matchmaking
      - name: Build and analyze matchmaking
        working-directory: backend/matchmaking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_MATCHMAKING }}
          MATCH_URL: http://match-ms:8080/matches
          TOURNAMENT_URL: http://tournament-ms:8082/tournaments
          PLAYER_URL: http://user-ms:8083/users
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=kelynwong_TMS-MATCHMAKING

  connect-to-supabase:
    name: Connect to Supabase and Run init.sql
    runs-on: ubuntu-latest
    needs: 
      - build-and-analyze-with-sonarcloud
      - build-and-deploy  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install psql client
        run: sudo apt-get install -y postgresql-client

      - name: Run init.sql on Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_AND_PORT }}
          SUPABASE_DB_USER: ${{ secrets.DB_USER }}
          SUPABASE_DB_PASSWORD: ${{ secrets.DB_PW }}
          SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
        run: |
          psql "postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@${SUPABASE_URL}/${SUPABASE_DB_NAME}" -f backend/init.sql